# Бинарный поиск (Binary Search) - это алгоритм поиска элемента в упорядоченном (часто сортированном) списке данных. В отличие от линейного поиска, который проверяет элементы последовательно, бинарный поиск делит список пополам и определяет, в какой половине элемент должен находиться. Затем он сравнивает искомое значение с элементом в середине списка. Если значение меньше элемента в середине, поиск продолжается в левой половине списка; если значение больше, поиск продолжается в правой половине. Процесс деления и сравнения повторяется, пока элемент не будет найден или не будет ясно, что он отсутствует.

# Основные характеристики бинарного поиска:
#     Эффективен для упорядоченных данных.
#     Временная сложность в худшем случае составляет O(log n), где n - количество элементов в списке.
#     Требует предварительной сортировки данных.


# Функция для бинарного поиска в упорядоченном списке
def binary_search(data, target):
    left = 0                            # Устанавливаем начальный индекс левой границы массива
    right = len(data) - 1               # Определение индекса правой границы массива. 
    
    while left <= right:                # Пока левая граница не превышает правую
        center = (left + right) // 2    # Вычисляем средний индекс
        if target == data[center]:      # Если искомое значение найдено в центре
            return f"ID = {center}"     # Возвращаем сообщение с индексом найденного элемента
        if target > data[center]:       # Если значение больше элемента в середине
            left = center + 1           # Сдвигаем левую границу вправо
        else:                           # Иначе значение меньше элемента в середине
            right = center - 1          # Сдвигаем правую границу влево
    
    else:                               # Если значение не найдено после всех итераций
        return "No value"               # Возвращаем сообщение о том, что значение не найдено

data = [10, 20, 30, 40, 50, 60, 70, 400]
target = 40
print(binary_search(data=data, target=target))



# Ещё одна вариация бинарного поиска
def binary_search(data, target):
    left, right = 0, len(data) - 1                 # Определяем начальные границы поиска (левую и правую)

    while left <= right:                           # Пока левая граница не превышает правую
        mid = (left + right) // 2                  # Вычисляем средний индекс
        if data[mid] == target:                    # Если элемент в середине равен искомому элементу
            return f"Элемент {target} найден по индексу {mid}"  # Возвращаем сообщение о нахождении
        elif data[mid] < target:                   # Если искомый элемент больше элемента в середине
            left = mid + 1                         # Сдвигаем левую границу
        else:                                      # Иначе искомый элемент меньше элемента в середине
            right = mid - 1                        # Сдвигаем правую границу

    return f"Элемент {target} не найден в списке"  # Если элемент не найден, возвращаем сообщение

data = [10, 20, 30, 40, 50, 60, 70, 400]
target = 400

result = binary_search(data, target)
print(result)

# Пояснение:
# Сдвигать левую границу в плюс если искомый элемент больше элемента в середине, а правую сдвигать в минус, если меньше искомого элемента