---
- name: delegate_to lesson # команда позволяет делегировать выполнение таском на конкретный сервер
  hosts: all
  become: yes

  vars:
    text: 'Hello world'

  tasks:
  - name: Create folder
    file:
      path: ~/lesson11
      state: directory

  - name: Create file1
    copy:
      dest: ~/lesson11/file1
      content: |
        file from lesson 11 (delegate_to)
        This is var: {{ text }}
    delegate_to: linux-test-1  # выполнит только на этом сервере

  - name: Create file1
    copy:
      dest: ~/lesson11/file2
      content: |
        file from lesson 11 (without delegate_to)
        This is var: {{ text }}

  - name: Unregister server from Load Balancer # эта таска получит с каждого cервера из инвентори данные и запишет на мастер ноду
    become: no
    shell: echo 'This server {{ inventory_hostname }} was deregistered from our Load Balancer. node name is {{ ansible_nodename }}' >> ~/mylog.txt
    delegate_to: 127.0.0.1


  - name: Update database # пример. Допустим, нужно запустить команду с одного сервера и всего 1 раз, а не для всех хостов из инвентори. По умолчанию команда выполняется с первого хоста из списка инвентори. Если нужно с конкретного, необходимо указать delegate_to
    shell: echo 123
    run_once: true

  - name: Reboot my servers
    shell: sleep 3 && reboot now
    async: 1 # выполнять задачу в асинхронном режиме. Этот параметр указывает, сколько времени Ansible должен ждать, прежде чем считать задачу завершенной. Его значение представляет собой количество секунд, в течение которых Ansible будет ожидать завершения задачи. Если значение установлено в 0, задача запускается в асинхронном режиме. Значение параметра async может быть целым числом, задающим количество секунд.
    poll: 0  # Ansible не будет ожидать завершения задачи, а просто запустит её асинхронно и продолжит выполнение следующих задач. Этот параметр указывает, как часто Ansible будет опрашивать выполнение задачи. Если установлено значение 0, это означает, что Ansible не будет опрашивать выполнение задачи и завершит выполнение задачи сразу же после её запуска в асинхронном режиме. Если установлено значение больше 0, Ansible будет опрашивать выполнение задачи каждые poll секунд. Значение параметра poll также может быть целым числом.

  - name: Wait till my servers will come up online
    become: no
    wait_for: # модуль Ansible, который позволяет ожидать определенного состояния у удаленного хоста
      host: "{{ inventory_hostname }}"
      state: started
      delay: 5 # опция, которая устанавливает задержку (в секундах) между повторными попытками проверки состояния. В данном случае, установлено значение 5 секунд.
      timeout: 40 # Определяет максимальное время ожидания в секундах. Если хост не перейдет в указанное состояние в течение этого времени, задача завершится с ошибкой. В данном случае, установлено значение 40 секунд. То есть при установленном timeout 40 и delay 5 будет 40 / 5 = 8 попыток
    delegate_to: 127.0.0.1 # это нужно делать на мастере, так как хосты были перезагружены и пока недоступны. Таким образом, Ansible активно проверяет изменение состояния локально, что может быть более эффективным, чем попытки активных проверок на удаленном хосте, который может быть временно недоступен.
      
